using BusinessObjects;
using Repositories;
using System.Windows;
using System.Windows.Controls;
using System.Windows.Data;

namespace WpfApp
{
    /// <summary>
    /// Interaction logic for Admin.xaml
    /// </summary>
    public partial class Admin : Window
    {
        private readonly IRoomInformationRepository _roomInformationRepository = new RoomInfomationRepository();
        private readonly ICustomerRepository _customerRepository = new CustomerRepository();
        private readonly IRoomTypeRepository _roomTypeRepository = new RoomTypeRepository();
        public Admin()
        {
            InitializeComponent();
            BindRooms();
            BindCustomers();
            BindRoomTypes();
        }

        private void BindRooms()
        {
            List<RoomInformation> roomInformations = _roomInformationRepository.GetRoomInformations();
            foreach (RoomInformation roomInformation in roomInformations)
            {
                roomInformation.RoomType = _roomTypeRepository.GetRoomTypeById(roomInformation.RoomTypeID);
            }
            dtRoom.ItemsSource = roomInformations;
        }

        private void BindCustomers()
        {
            List<Customer> customers = _customerRepository.GetCustomers();
            dtCustomers.ItemsSource = customers;
        }

        private void BindRoomTypes()
        {
            List<RoomType> roomTypes = _roomTypeRepository.GetRoomTypes();
            dtRoomType.ItemsSource = roomTypes;
        }



        private void dtRoom_AutoGeneratedColumns(object sender, EventArgs e)
        {
            // Add template column for actions (update and delete buttons)
            DataGridTemplateColumn actionsColumn = new DataGridTemplateColumn();
            actionsColumn.Header = "Actions";
            actionsColumn.Width = new DataGridLength(1, DataGridLengthUnitType.Auto);

            // Define the template for the cell
            FrameworkElementFactory factory = new FrameworkElementFactory(typeof(StackPanel));
            factory.SetValue(StackPanel.OrientationProperty, Orientation.Horizontal);
            factory.SetValue(StackPanel.MarginProperty, new Thickness(5, 0, 5, 0)); // Adjust margins for spacing

            // Update button
            FrameworkElementFactory btnUpdate = new FrameworkElementFactory(typeof(Button));
            btnUpdate.SetValue(Button.ContentProperty, "Update");
            btnUpdate.SetValue(Button.CommandParameterProperty, new Binding("RoomID"));
            btnUpdate.AddHandler(Button.ClickEvent, new RoutedEventHandler(Update_Click));
            factory.AppendChild(btnUpdate);

            // Delete button
            FrameworkElementFactory btnDelete = new FrameworkElementFactory(typeof(Button));
            btnDelete.SetValue(Button.ContentProperty, "Delete");
            btnDelete.SetValue(Button.CommandParameterProperty, new Binding("RoomID"));
            btnDelete.AddHandler(Button.ClickEvent, new RoutedEventHandler(Delete_Click));
            factory.AppendChild(btnDelete);

            // Set the cell template
            DataTemplate cellTemplate = new DataTemplate();
            cellTemplate.VisualTree = factory;
            actionsColumn.CellTemplate = cellTemplate;

            // Add column to DataGrid
            dtRoom.Columns.Add(actionsColumn);
        }


        private void Update_Click(object sender, RoutedEventArgs e)
        {
            // Retrieve the roomID from the CommandParameter
            Button button = sender as Button;
            int roomID = (int)button?.CommandParameter;

            // Example: Open a new window or user control for updating
            UpdateRoomWindow updateWindow = new UpdateRoomWindow(roomID); // Pass roomID to the window
            updateWindow.Owner = Window.GetWindow(this);
            updateWindow.WindowStartupLocation = WindowStartupLocation.CenterOwner;
            updateWindow.ShowDialog(); // Show the window as a modal dialog
        }

        private void Delete_Click(object sender, RoutedEventArgs e)
        {
           
            Button button = sender as Button;
            int roomID = (int)button?.CommandParameter;
            MessageBox.Show("" + roomID);


        }

        private void Add_Room_Click(object sender, RoutedEventArgs e)
        {
            AddRoomWindow addRoomWindow = new AddRoomWindow();
            addRoomWindow.Owner = Window.GetWindow(this); // Set the owner window
            addRoomWindow.WindowStartupLocation = WindowStartupLocation.CenterOwner; // Center the window
            addRoomWindow.ShowDialog();
        }
    }
}
